//This is a collection of my [Jeremy Yao] solutions to CodingBat's Recursion-1 Problems.
public int factorial(int n) {

    if (n == 1) {
        return 1;
    } else {
        return n * this.factorial(n - 1);
    }
}

public int bunnyEars(int bunnies) {
    if (bunnies == 0) {
        return 0;
    } else {
        return 2 + this.bunnyEars(bunnies - 1);
    }
}

public int fibonacci(int n) {
    if (n == 0) {
        return 0;
    } else if (n == 1 || n == 2) {
        return 1;
    } else {
        return this.fibonacci(n - 2) + this.fibonacci(n - 1);
    }
}

public int bunnyEars2(int bunnies) {
    if (bunnies == 0) {
        return 0;
    } else if (bunnies % 2 == 0) {
        return 3 + this.bunnyEars2(bunnies - 1);
    } else {
        return 2 + this.bunnyEars2(bunnies - 1);
    }
}

public int triangle(int rows) {
    if (rows <= 0) {
        return 0;
    } else {
        return rows + this.triangle(rows - 1);
    }

}

public int sumDigits(int n) {
    if (n < 10) {
        return n;
    } else {
        return n % 10 + this.sumDigits(n / 10);
    }

}

public int count7(int n) {
    if (n < 10 && n != 7) {
        return 0;
    } else if (n % 10 == 7) {
        return 1 + this.count7(n / 10);
    } else {
        return this.count7(n / 10);
    }
}

public int count8(int n) {
    if (n < 10 && n != 8) {
        return 0;
    } else if (n % 10 == 8) {
        int num = 1;
        if (n / 10 % 10 == 8) {
            num++;
        }
        return num + this.count8(n / 10);
    } else {
        return this.count8(n / 10);
    }
}

public int powerN(int base, int n) {
    if (n == 1) {
        return base;
    } else {
        int power = this.powerN(base, n / 2);
        power *= power;
        if (n % 2 == 1) {
            power *= base;
        }
        return power;
    }
}

public int countX(String str) {
    if (str.isEmpty()) {
        return 0;
    } else if (str.charAt(0) == 'x') {
        return 1 + this.countX(str.substring(1, str.length()));
    } else {
        return this.countX(str.substring(1, str.length()));
    }
}

public int countHi(String str) {

    if (str.length() <= 1) {
        return 0;
    } else if (str.substring(0, 2).equals("hi")) {
        return 1 + this.countHi(str.substring(1, str.length()));
    } else {
        return this.countHi(str.substring(1, str.length()));
    }

}

public int countHi(String str) {

    if (str.length() <= 1) {
        return 0;
    } else if (str.substring(0, 2).equals("hi")) {
        return 1 + this.countHi(str.substring(1, str.length()));
    } else {
        return this.countHi(str.substring(1, str.length()));
    }
}

public String changeXY(String str) {
    if (str.isEmpty()) {
        return "";
    } else if (str.charAt(0) == 'x') {
        return "y" + this.changeXY(str.substring(1));
    } else {
        return str.charAt(0) + this.changeXY(str.substring(1));
    }
}

public String changePi(String str) {

    if (str.length() <= 1) {
        return str;
    } else if (str.substring(0, 2).equals("pi")) {
        return "3.14" + this.changePi(str.substring(2, str.length()));
    } else {
        return str.substring(0, 1)
                + this.changePi(str.substring(1, str.length()));
    }
}

public String noX(String str) {
    if (str.isEmpty()) {
        return "";
    } else if (str.charAt(0) == 'x') {
        return this.noX(str.substring(1));
    } else {
        return str.charAt(0) + this.noX(str.substring(1));
    }
}

public boolean array6(int[] nums, int index) {

    if (index >= nums.length) {
        return false;
    } else if (nums[index] == 6) {
        return true;
    } else {
        return this.array6(nums, index + 1);
    }
}

public int array11(int[] nums, int index) {
    if (index >= nums.length) {
        return 0;
    } else if (nums[index] == 11) {
        return 1 + this.array11(nums, index + 1);
    } else {
        return this.array11(nums, index + 1);
    }
}

public boolean array220(int[] nums, int index) {
    if (index + 1 >= nums.length) {
        return false;
    } else if (nums[index] * 10 == nums[index + 1]) {
        return true;
    } else {
        return this.array220(nums, index + 1);
    }
}

public String allStar(String str) {
    if (str.length() <= 1) {
        return str;
    } else {
        return str.charAt(0) + "*" + this.allStar(str.substring(1));
    }
}

public String pairStar(String str) {
    if (str.length() <= 1) {
        return str;
    } else if (str.charAt(0) == str.charAt(1)) {
        return str.charAt(0) + "*" + this.pairStar(str.substring(1));
    } else {
        return str.charAt(0) + this.pairStar(str.substring(1));
    }
}

public String pairStar(String str) {
    if (str.length() <= 1) {
        return str;
    } else if (str.charAt(0) == str.charAt(1)) {
        return str.charAt(0) + "*" + this.pairStar(str.substring(1));
    } else {
        return str.charAt(0) + this.pairStar(str.substring(1));
    }
}

public String endX(String str) {
    if (str.length() <= 0) {
        return str;
    } else if (str.charAt(0) == 'x') {
        return this.endX(str.substring(1)) + "x";
    } else {
        return str.charAt(0) + this.endX(str.substring(1));
    }
}

public int countPairs(String str) {
    if (str.length() <= 2) {
        return 0;
    } else if (str.charAt(0) == str.charAt(2)) {
        return 1 + this.countPairs(str.substring(1));
    } else {
        return this.countPairs(str.substring(1));
    }
}

public int countAbc(String str) {
    if (str.length() < 3) {
        return 0;
    } else {
        String sub = str.substring(0, 3);
        if (sub.equals("abc") || sub.equals("aba")) {
            return 1 + this.countAbc(str.substring(1));
        } else {
            return this.countAbc(str.substring(1));
        }
    }
}

public int count11(String str) {
    if (str.length() <= 1) {
        return 0;
    } else if (str.charAt(0) == '1' && str.charAt(1) == '1') {
        return 1 + this.count11(str.substring(2));
    } else {
        return this.count11(str.substring(1));
    }
}

public String stringClean(String str) {
    if (str.length() <= 1) {
        return str;
    } else if (str.charAt(0) == str.charAt(1)) {
        return this.stringClean(str.substring(1));
    } else {
        return str.charAt(0) + this.stringClean(str.substring(1));
    }
}

public int countHi2(String str) {
    if (str.length() <= 1) {
        return 0;
    } else if (str.charAt(0) == 'x' && str.charAt(1) == 'h') {
        return this.countHi2(str.substring(2, str.length()));
    } else if (str.substring(0, 2).equals("hi")) {
        return 1 + this.countHi2(str.substring(1, str.length()));
    } else {
        return this.countHi2(str.substring(1, str.length()));
    }
}

public String parenBit(String str) {
    if (str.length() == 0) {
        return "";
    } else if (str.indexOf("(") != -1) {
        if (str.indexOf("(") == 0) {
            return "(" + this.parenBit(str.substring(1));
        }
        return this.parenBit(str.substring(1));
    } else if (str.indexOf(")") != -1) {
        return str.charAt(0) + this.parenBit(str.substring(1));
    } else {
        return this.parenBit(str.substring(1));
    }
}

public boolean nestParen(String str) {
    if (str.length() == 1) {
        return false;
    }
    return (str.length() == 0)
            || (str.charAt(0) == '(' && str.charAt(str.length() - 1) == ')')
                    && this.nestParen(str.substring(1, str.length() - 1));
}

public int strCount(String str, String sub) {
    int s = sub.length();

    if (str.length() < s) {
        return 0;
    } else if (str.substring(0, s).equals(sub)) {
        return 1 + this.strCount(str.substring(s), sub);
    } else {
        return this.strCount(str.substring(1), sub);
    }
}

public boolean strCopies(String str, String sub, int n) {
    if (n <= 0) {
        return true;
    } else if (str.length() < sub.length()) {
        return false;
    } else if (str.substring(0, sub.length()).equals(sub)) {
        n--;
        return this.strCopies(str.substring(1), sub, n);
    } else {
        return this.strCopies(str.substring(1), sub, n);
    }
}

public int strDist(String str, String sub) {
    if (str.length() < sub.length()) {
        return 0;
    } else if (!str.substring(0, sub.length()).equals(sub)) {
        return this.strDist(str.substring(1), sub);
    } else if (!str.substring(str.length() - sub.length(), str.length())
            .equals(sub)) {
        return this.strDist(str.substring(0, str.length() - 1), sub);
    } else {
        return str.length();
    }
}
